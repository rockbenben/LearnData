"use strict";(self.webpackChunklearn_data=self.webpackChunklearn_data||[]).push([[3058],{7708:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}},6927:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>h,data:()=>g});var t=a(4754);const p=(0,t.Lk)("p",null,"Python 很久没用了，暂时只做记录作用。",-1),e=(0,t.Lk)("h2",{id:"入门文档",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#入门文档"},[(0,t.Lk)("span",null,"入门文档")])],-1),o={href:"https://www.runoob.com/python3/python3-basic-syntax.html",target:"_blank",rel:"noopener noreferrer"},l={href:"https://scrapy-chs.readthedocs.io/zh-cn/latest/intro/tutorial.html#intro-tutorial",target:"_blank",rel:"noopener noreferrer"},c={href:"https://requests.readthedocs.io/zh_CN/latest/",target:"_blank",rel:"noopener noreferrer"},i={href:"https://www.crummy.com/software/BeautifulSoup/bs4/doc.zh/",target:"_blank",rel:"noopener noreferrer"},u={href:"https://openpyxl.readthedocs.io/en/stable/",target:"_blank",rel:"noopener noreferrer"},r=(0,t.Lk)("li",null,"Pillow 模块 - 图片",-1),k=(0,t.Lk)("li",null,"re 模块 - 正则表达式",-1),d=(0,t.Fv)('<h2 id="简单示例" tabindex="-1"><a class="header-anchor" href="#简单示例"><span>简单示例</span></a></h2><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> requests  <span class="token comment">#载入指定库</span>\nheaders <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;User-Agent&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Mozilla/5.0 (Windows NT 10.0; WOW64; rv:63.0) Gecko/20100101 Firefox/63.0&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;text/html; charset=utf-8&#39;</span><span class="token punctuation">}</span>\nr <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;&lt;http://www.runoob.com/python3/python3-string.html&gt;&quot;</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>\n<span class="token comment">#r.encoding = &#39;utf-8&#39; #如果没设置表头，可以设置编码防止中文出现乱码</span>\nr<span class="token punctuation">.</span>encoding <span class="token operator">=</span> r<span class="token punctuation">.</span>apparent_encoding <span class="token comment">#使用网页固定编码</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>headers<span class="token punctuation">)</span>\n\n<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup\nsoup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">,</span> <span class="token string">&quot;html.parser&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>title<span class="token punctuation">.</span>string<span class="token punctuation">)</span>\n\n<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image\n\n<span class="token comment"># 打开一个 jpg 图像文件，注意是当前路径</span>\nim <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;test.jpg&#39;</span><span class="token punctuation">)</span>\n<span class="token comment"># 获得图像尺寸</span>\nw<span class="token punctuation">,</span> h <span class="token operator">=</span> im<span class="token punctuation">.</span>size\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Original image size: %sx%s&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>w<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment"># 缩放到 50%</span>\nim<span class="token punctuation">.</span>thumbnail<span class="token punctuation">(</span><span class="token punctuation">(</span>w<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">,</span> h<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Resize image to: %sx%s&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>w<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">,</span> h<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment"># 把缩放后的图像用 jpeg 格式保存</span>\nim<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">&#39;thumbnail.jpg&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;jpeg&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>if __name__ = &quot;__main__&quot;</code> 是只在主程序中运行，如果是作为模块引用，则不运行。 <code>sys.path.append(&quot;c:\\\\\\\\Python37\\\\\\\\test)</code> 添加模块的搜索路径文件夹。<code>\\\\</code> 在 Pythone 中会转义，所以要输入两个。</p><h2 id="基础语法" tabindex="-1"><a class="header-anchor" href="#基础语法"><span>基础语法</span></a></h2><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># end=&quot; &quot;为后缀，可空，默认为换行符</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;密码不能含有“*”，你还有&quot;</span><span class="token punctuation">,</span>count<span class="token punctuation">,</span><span class="token string">&quot;次机会&quot;</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span>\n\n<span class="token comment"># &#39;&#39;&#39; 三引号可以用多行，或在每行后添加 \\\\ ，或每行用引号括起来</span>\n\n<span class="token builtin">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">#判别变量种类，容易出问题，不要用于判定</span>\n<span class="token builtin">isinstance</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token builtin">float</span><span class="token punctuation">)</span> <span class="token comment">#判断变量是否是该类型，主要使用</span>\n\n<span class="token comment"># s 为字符串</span>\ns<span class="token punctuation">.</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">#所有字符都是数字或者字母，为真返回 True, 否则返回 False</span>\ns<span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">#所有字符都是字母，为真返回 True, 否则返回 False</span>\ns<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">#所有字符都是数字，为真返回 True, 否则返回 False</span>\ns<span class="token punctuation">.</span>islower<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">#所有字符都是小写，为真返回 True, 否则返回 False</span>\ns<span class="token punctuation">.</span>isupper<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">#所有字符都是大写，为真返回 True, 否则返回 False</span>\ns<span class="token punctuation">.</span>istitle    <span class="token comment">#所有单词都是首字母大写，为真返回 True, 否则返回 False</span>\ns<span class="token punctuation">.</span>isspace    <span class="token comment">#所有字符都是空白字符，为真返回 True, 否则返回 False</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="序列类型" tabindex="-1"><a class="header-anchor" href="#序列类型"><span>序列类型</span></a></h2><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment">#列表</span>\n<span class="token builtin">list</span> <span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">]</span>\n<span class="token builtin">list</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token builtin">list</span> <span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token comment">#append() 函数是方法向列表的尾部添加一个新的元素</span>\n\n<span class="token comment">#元组</span>\n<span class="token builtin">tuple</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span>\n<span class="token builtin">tuple</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token comment">#元组只有一个元素时，必须在后面加逗号</span>\n\n<span class="token comment">#字符串</span>\n<span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 是个集合函数，括号里的参数可以是字典类型，列表类型，元组类型，字符串类型，不能是数字类型。\ns1 <span class="token operator">=</span> <span class="token string">&quot;abc123&quot;</span>\ns2 <span class="token operator">=</span> <span class="token string">&quot;abc,123&quot;</span>\ns2<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#字符串分割后变为列表，使用逗号进行分割 [&quot;abc&quot;,123]</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;|&quot;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#join 只能对字符串进行操作，用&quot;|&quot;中的符号连接字符串，比如 ab</span>\n\nr1 <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>\n\n<span class="token comment">#集合是无序列的，每次出现顺序都不同，不支持按索引提取</span>\n<span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nset1 <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\ncollege1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;哲学&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;经济学&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;法学&quot;</span><span class="token punctuation">}</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>college1<span class="token punctuation">)</span> <span class="token comment">#每次集合排列顺序是随机的</span>\ncollege2 <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;哲学&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;经济学&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;法学&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">#将其他数据转换为集合</span>\n\n<span class="token comment">#字典</span>\n<span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="字符串用法" tabindex="-1"><a class="header-anchor" href="#字符串用法"><span>字符串用法</span></a></h2><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token builtin">len</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token comment">#返回字符串长度</span>\njoin<span class="token punctuation">(</span>seq<span class="token punctuation">)</span>  <span class="token comment"># 以指定字符串作为分隔符，将 seq 中所有的元素 (的字符串表示) 合并为一个新的字符串</span>\nstartswith<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">,</span> beg<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#检查字符串是否是以 obj 开头，是则返回 True，否则返回 False。如果 beg 和 end 指定值，则在指定范围内检查。</span>\nendswith<span class="token punctuation">(</span>suffix<span class="token punctuation">,</span> beg<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 检查字符串是否以 obj 结束，如果 beg 或者 end 指定则检查指定的范围内是否以 obj 结束，如果是，返回 True，否则返回 False.</span>\n\ncount<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">,</span> beg<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 返回 str 在 string 里面出现的次数，如果 beg 或者 end 指定则返回指定范围内 str 出现的次数</span>\nfind<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">,</span> beg<span class="token operator">=</span><span class="token number">0</span> end<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">#检测 str 是否包含在字符串中，如果指定范围 beg 和 end，则检查是否包含在指定范围内，如果包含返回开始的索引值，否则返回 -1</span>\nrfind<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">,</span> beg<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#类似于 find() 函数，不过是从右边开始查找。</span>\nindex<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">,</span> beg<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 跟 find() 方法一样，只不过如果 str 不在字符串中会报一个异常。</span>\nrindex<span class="token punctuation">(</span> <span class="token builtin">str</span><span class="token punctuation">,</span> beg<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#类似于 index()，不过是从右边开始。</span>\n\nstrip<span class="token punctuation">(</span><span class="token punctuation">[</span>chars<span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment">#在字符串上执行 lstrip() 和 rstrip(),移除头尾指定字符</span>\nreplace<span class="token punctuation">(</span>old<span class="token punctuation">,</span> new <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token builtin">max</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">#把 将字符串中的 str1 替换成 str2，如果 max 指定，则替换不超过 max 次。</span>\nsplit<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> num<span class="token operator">=</span>string<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">#num=string.count(str)) 以 str 为分隔符截取字符串，如果 num 有指定值，则仅截取 num 个子字符串</span>\nsplitlines<span class="token punctuation">(</span><span class="token punctuation">[</span>keepends<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">#按照行 (&#39;\\\\r&#39;, &#39;\\\\r\\\\n&#39;, \\\\n&#39;) 分隔，返回一个包含各行作为元素的列表，如果参数 keepends 为 False，不包含换行符，如果为 True，则保留换行符。</span>\n\nlower<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">#转换字符串中所有大写字符为小写。</span>\nupper<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">#转换字符串中的小写字母为大写</span>\nswapcase<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#将字符串中大写转换为小写，小写转换为大写</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符"><span>运算符</span></a></h2><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>%</td><td>取模 - 返回除法的余数</td><td>21 % 10 输出结果 1</td></tr><tr><td>**</td><td>幂 - 返回 x 的 y 次幂</td><td>10**21 为 10 的 21 次方</td></tr><tr><td>//</td><td>取整除 - 返回商的整数部分</td><td>9//2 输出结果 4 , 9.0//2.0 输出结果 4.0</td></tr></tbody></table><p>优先级：not &gt; and &gt; or not 1 or 0 and 1 or 3 and 4 or 5 (not 1) or (0 and 1) or (3 and 4) or 5</p><figure><img src="https://img.newzone.top/2022-06-29-18-18-44.png?imageMogr2/format/webp" alt="Python 运算符优先级" tabindex="0" loading="lazy"><figcaption>Python 运算符优先级</figcaption></figure><h2 id="条件三元表达式" tabindex="-1"><a class="header-anchor" href="#条件三元表达式"><span>条件三元表达式</span></a></h2><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span>\n<span class="token keyword">if</span> x <span class="token operator">&lt;</span> y<span class="token punctuation">:</span>\n    small <span class="token operator">=</span> x\n<span class="token keyword">else</span><span class="token punctuation">:</span>\n    small <span class="token operator">=</span> y\n<span class="token comment"># 可以缩略为下面一句</span>\nsmall <span class="token operator">=</span> x <span class="token keyword">if</span> x <span class="token operator">&lt;</span> y <span class="token keyword">else</span> y\n\nx<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span>\n<span class="token keyword">if</span> x<span class="token operator">&lt;</span>y<span class="token punctuation">:</span>\n    small <span class="token operator">=</span> x\n    <span class="token keyword">if</span> z <span class="token operator">&lt;</span> small<span class="token punctuation">:</span>\n        small <span class="token operator">=</span>z\n<span class="token keyword">elif</span> y <span class="token operator">&lt;</span> z<span class="token punctuation">:</span>\n    small <span class="token operator">=</span>y\n<span class="token keyword">else</span><span class="token punctuation">:</span>\n    small <span class="token operator">=</span> z\n<span class="token comment"># 可以缩略为下面一句</span>\nsmall <span class="token operator">=</span> x <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token operator">&lt;</span>y <span class="token keyword">and</span> <span class="token keyword">not</span><span class="token punctuation">(</span>z<span class="token operator">&lt;</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">(</span>y <span class="token keyword">if</span> y<span class="token operator">&lt;</span>z <span class="token keyword">else</span> z<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="条件循环" tabindex="-1"><a class="header-anchor" href="#条件循环"><span>条件循环</span></a></h2><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token comment"># 无限循环条件</span>\n<span class="token keyword">break</span> <span class="token comment"># 跳出 for 和 while 的循环体。如果你从 for 或 while 循环中终止，任何对应的循环 else 块将不执行</span>\n<span class="token keyword">continue</span> <span class="token comment"># 告诉 Python 跳过当前循环块中的剩余语句，然后继续进行下一轮循环</span>\n<span class="token keyword">for</span> a <span class="token keyword">in</span> b   <span class="token comment">#遍历任何序列的项目，如一个列表或者一个字符串</span>\n\n<span class="token comment"># assert（断言）确保程序中的某个条件一定为真才能让程序正常工作，否则就让程序自动崩溃并抛出 AssertionError 异常</span>\n<span class="token keyword">assert</span> <span class="token number">3</span> <span class="token operator">&gt;</span> <span class="token number">4</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment">#条件循环参考，用户只有三次输入错误，内容中包含“*”不计算在内</span>\ncount<span class="token operator">=</span><span class="token number">3</span>\npassword<span class="token operator">=</span><span class="token string">&quot;xxxxdfd&quot;</span>\n\n<span class="token keyword">while</span> count<span class="token punctuation">:</span>  <span class="token comment"># 0 为 False，其他为 True</span>\n    passwd <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入密码：&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">if</span> passwd <span class="token operator">==</span> password<span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;密码正确，进入程序&quot;</span><span class="token punctuation">)</span>\n        <span class="token keyword">break</span>\n    <span class="token keyword">elif</span> <span class="token string">&quot;*&quot;</span> <span class="token keyword">in</span> passwd<span class="token punctuation">:</span>\n  <span class="token comment"># end=&quot; &quot;为后缀，可空，默认为换行符</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;密码不能含有“*”，你还有&quot;</span><span class="token punctuation">,</span>count<span class="token punctuation">,</span><span class="token string">&quot;次机会&quot;</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span>\n        <span class="token keyword">continue</span>\n    <span class="token keyword">else</span><span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;密码错误，你还有&quot;</span><span class="token punctuation">,</span>count<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;次机会&quot;</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span>\n    count<span class="token operator">-=</span><span class="token number">1</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="range-函数" tabindex="-1"><a class="header-anchor" href="#range-函数"><span>range() 函数</span></a></h2><p>range(stop)</p><p>range(start, stop[, step])</p><p>range 函数具有一些特性：</p><ul><li>如果 step 参数缺省，默认 1；如果 start 参数缺省，默认 0。</li><li>如果 step 是正整数，则最后一个元素（start + i _ step）小于 stop。</li><li>如果 step 是负整数，则最后一个元素（start + i _ step）大于 stop。</li><li>step 参数必须是非零整数，否则抛出 VauleError 异常。</li></ul><h2 id="向列表添加元素" tabindex="-1"><a class="header-anchor" href="#向列表添加元素"><span>向列表添加元素</span></a></h2>',24),m={href:"http://www.runoob.com/python/python-lists.html",target:"_blank",rel:"noopener noreferrer"},b=(0,t.Fv)('<div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token builtin">list</span> <span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;xxxx&quot;</span><span class="token punctuation">,</span><span class="token number">3.14</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span>\n<span class="token builtin">list</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>   <span class="token comment"># 添加元素</span>\n<span class="token builtin">list</span><span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&quot;或&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment"># 添加列表</span>\n<span class="token builtin">list</span><span class="token punctuation">.</span>insert<span class="token punctuation">(</span>index<span class="token punctuation">,</span> obj<span class="token punctuation">)</span>   <span class="token comment"># index -- 对象 obj 需要插入的索引位置 (从 0 开始 ); obj -- 要插入列表中的对象。</span>\n\n<span class="token builtin">list</span><span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">&quot;xxxx&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 删除第一个含有相同内容的元素</span>\n<span class="token keyword">del</span> <span class="token builtin">list</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>            <span class="token comment">#删除指定索引位置的元素</span>\n<span class="token builtin">list</span><span class="token punctuation">.</span>pop<span class="token punctuation">(</span>obj<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token comment">#obj -- 可选参数，从列表要移除指定索引位置的对象，默认为最后以为，返回被移出的元素对象</span>\n\n<span class="token builtin">list</span><span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">#将列表彻底反转</span>\n<span class="token builtin">list</span><span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">#从小往大排训</span>\n<span class="token builtin">list</span><span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment">#从大往小排序</span>\n\n将指定列表的小甲鱼改为小鱿鱼\nlist1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;小甲鱼&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">]</span>\nlist1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;小鱿鱼&#39;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="列表切片" tabindex="-1"><a class="header-anchor" href="#列表切片"><span>列表切片</span></a></h2><p>L = [&#39;Google&#39;, &#39;Runoob&#39;, &#39;Taobao&#39;]</p><p>L(start: stop[: step]) step 可以使用负数，从尾部往左走。</p><table><thead><tr><th>结果 Python 表达式</th><th>结果</th><th>描述</th></tr></thead><tbody><tr><td>L[2]</td><td>&#39;Taobao&#39;</td><td>读取列表中第三个元素</td></tr><tr><td>L[-2]</td><td>&#39;Runoob&#39;</td><td>读取列表中倒数第二个元素</td></tr><tr><td>L[1:]</td><td>[&#39;Runoob&#39;, &#39;Taobao&#39;]</td><td>从第二个元素开始截取列表</td></tr><tr><td>L[:]</td><td>[&#39;Google&#39;, &#39;Runoob&#39;, &#39;Taobao&#39;]</td><td>获取完整列表</td></tr></tbody></table><p>元祖 tuple 与列表 list 用法类似，但元祖不能直接修改元素，只能用切片的方法来修改</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>temp<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;xxxxx&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;迷途&quot;</span>，<span class="token number">2</span><span class="token punctuation">)</span>      <span class="token comment">#元祖</span>\ntemp<span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span>“y”<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token operator">+</span>temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>\n<span class="token keyword">del</span> temp <span class="token comment">#删除元祖</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="列表解析" tabindex="-1"><a class="header-anchor" href="#列表解析"><span>列表解析</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>list1 <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token operator">**</span><span class="token number">2</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token comment">#list1 为 [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</span>\n<span class="token comment">#相当于</span>\nlist1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    list1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span>\n\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">if</span> x<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span> <span class="token keyword">if</span> y<span class="token operator">%</span><span class="token number">2</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">]</span>\n<span class="token comment">#相当于</span>\nlist1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">if</span> x<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>\n            <span class="token keyword">if</span> y<span class="token operator">%</span><span class="token number">2</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">:</span>\n                list1<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="变量" tabindex="-1"><a class="header-anchor" href="#变量"><span>变量</span></a></h2><p>Python 变量是贴标签，而非存储数据</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>list1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span>\nlist2<span class="token operator">=</span>list1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>\nlist3<span class="token operator">=</span>list1\n<span class="token comment"># list2 和 list3 的值此时相同，但一旦对 list1 内部进行调整，比如排序、增减变量</span>\nlist1<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># list3 会随着 list1 发生变化，list2 不变</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>lambda、filter、map</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>g<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span>y <span class="token punctuation">:</span> x<span class="token operator">+</span>y\ng<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>\n<span class="token number">7</span>\n<span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#过滤 0-9 中能整除 2 的数字</span>\n<span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x <span class="token punctuation">:</span> x<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#罗列 0-9 每个数字乘 2 的结果</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',14),v={},h=(0,a(7708).A)(v,[["render",function(n,s){const a=(0,t.g2)("ExternalLinkIcon");return(0,t.uX)(),(0,t.CE)("div",null,[p,e,(0,t.Lk)("ul",null,[(0,t.Lk)("li",null,[(0,t.Lk)("a",o,[(0,t.eW)("Python3 语法"),(0,t.bF)(a)])]),(0,t.Lk)("li",null,[(0,t.Lk)("a",l,[(0,t.eW)("Scrapy 入门"),(0,t.bF)(a)]),(0,t.eW)(" 浮点数：1.23x109 就是 1.23e9，或者 12.3e8，0.000012 可以写成 1.2e-5")]),(0,t.Lk)("li",null,[(0,t.Lk)("a",c,[(0,t.eW)("requests"),(0,t.bF)(a)]),(0,t.eW)(" 模块 - 获取数据")]),(0,t.Lk)("li",null,[(0,t.Lk)("a",i,[(0,t.eW)("BeautifulSoup4"),(0,t.bF)(a)]),(0,t.eW)(" 模块 - 解析 HTML")]),(0,t.Lk)("li",null,[(0,t.Lk)("a",u,[(0,t.eW)("openpyxl"),(0,t.bF)(a)]),(0,t.eW)(" 模块 - 读写 Excel 文件")]),r,k]),d,(0,t.Lk)("p",null,[(0,t.Lk)("a",m,[(0,t.eW)("向列表添加元素"),(0,t.bF)(a)])]),b])}]]),g=JSON.parse('{"path":"/code/Python.html","title":"Python","lang":"zh-CN","frontmatter":{"article":false,"title":"Python","icon":"fa-brands fa-python","order":3,"description":"Python 很久没用了，暂时只做记录作用。 入门文档 Python3 语法 Scrapy 入门 浮点数：1.23x109 就是 1.23e9，或者 12.3e8，0.000012 可以写成 1.2e-5 requests 模块 - 获取数据 BeautifulSoup4 模块 - 解析 HTML openpyxl 模块 - 读写 Excel 文件 P...","head":[["meta",{"property":"og:url","content":"https://newzone.top/code/Python.html"}],["meta",{"property":"og:site_name","content":"LearnData 开源笔记"}],["meta",{"property":"og:title","content":"Python"}],["meta",{"property":"og:description","content":"Python 很久没用了，暂时只做记录作用。 入门文档 Python3 语法 Scrapy 入门 浮点数：1.23x109 就是 1.23e9，或者 12.3e8，0.000012 可以写成 1.2e-5 requests 模块 - 获取数据 BeautifulSoup4 模块 - 解析 HTML openpyxl 模块 - 读写 Excel 文件 P..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:image","content":"https://img.newzone.top/2022-06-29-18-18-44.png?imageMogr2/format/webp"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-04T01:53:51.000Z"}],["meta",{"property":"article:author","content":"LearnData"}],["meta",{"property":"article:modified_time","content":"2024-04-04T01:53:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"Python\\",\\"description\\":\\"Python 很久没用了，暂时只做记录作用。 入门文档 Python3 语法 Scrapy 入门 浮点数：1.23x109 就是 1.23e9，或者 12.3e8，0.000012 可以写成 1.2e-5 requests 模块 - 获取数据 BeautifulSoup4 模块 - 解析 HTML openpyxl 模块 - 读写 Excel 文件 P...\\"}"]]},"headers":[{"level":2,"title":"入门文档","slug":"入门文档","link":"#入门文档","children":[]},{"level":2,"title":"简单示例","slug":"简单示例","link":"#简单示例","children":[]},{"level":2,"title":"基础语法","slug":"基础语法","link":"#基础语法","children":[]},{"level":2,"title":"序列类型","slug":"序列类型","link":"#序列类型","children":[]},{"level":2,"title":"字符串用法","slug":"字符串用法","link":"#字符串用法","children":[]},{"level":2,"title":"运算符","slug":"运算符","link":"#运算符","children":[]},{"level":2,"title":"条件三元表达式","slug":"条件三元表达式","link":"#条件三元表达式","children":[]},{"level":2,"title":"条件循环","slug":"条件循环","link":"#条件循环","children":[]},{"level":2,"title":"range() 函数","slug":"range-函数","link":"#range-函数","children":[]},{"level":2,"title":"向列表添加元素","slug":"向列表添加元素","link":"#向列表添加元素","children":[]},{"level":2,"title":"列表切片","slug":"列表切片","link":"#列表切片","children":[{"level":3,"title":"列表解析","slug":"列表解析","link":"#列表解析","children":[]}]},{"level":2,"title":"变量","slug":"变量","link":"#变量","children":[]}],"git":{"createdTime":1658511538000,"updatedTime":1712195631000,"contributors":[{"name":"rockbenben","email":"qingwhat@gmail.com","commits":9},{"name":"Mr.Hope","email":"mister-hope@outlook.com","commits":1}]},"readingTime":{"minutes":8,"words":2401},"filePathRelative":"code/Python.md","localizedDate":"2022年7月22日","excerpt":"<p>Python 很久没用了，暂时只做记录作用。</p>\\n<h2>入门文档</h2>\\n<ul>\\n<li><a href=\\"https://www.runoob.com/python3/python3-basic-syntax.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Python3 语法</a></li>\\n<li><a href=\\"https://scrapy-chs.readthedocs.io/zh-cn/latest/intro/tutorial.html#intro-tutorial\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Scrapy 入门</a>\\n浮点数：1.23x109 就是 1.23e9，或者 12.3e8，0.000012 可以写成 1.2e-5</li>\\n<li><a href=\\"https://requests.readthedocs.io/zh_CN/latest/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">requests</a> 模块 - 获取数据</li>\\n<li><a href=\\"https://www.crummy.com/software/BeautifulSoup/bs4/doc.zh/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">BeautifulSoup4</a> 模块 - 解析 HTML</li>\\n<li><a href=\\"https://openpyxl.readthedocs.io/en/stable/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">openpyxl</a> 模块 - 读写 Excel 文件</li>\\n<li>Pillow 模块 - 图片</li>\\n<li>re 模块 - 正则表达式</li>\\n</ul>","autoDesc":true}')}}]);